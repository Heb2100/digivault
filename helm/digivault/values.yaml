# helm/digivault/values.yaml

replicaCount: 1 # 배포될 Pod의 초기 개수

image:
  repository: asia-northeast3-docker.pkg.dev/aesthetic-fiber-462503-t5/digivault
  name: digivault-app
  tag: latest
  pullPolicy: IfNotPresent
  
service:
  type: LoadBalancer # 서비스 타입 (ClusterIP, NodePort, LoadBalancer)
  port: 80 # 서비스가 노출할 포트
  targetPort: 3000 # 컨테이너가 리스닝하는 포트 (digivault 앱의 실제 포트)

serviceAccount:
  create: true # ServiceAccount를 생성할지 여부 (기본값: true)
  annotations: {} # ServiceAccount에 추가할 어노테이션
  name: "" # ServiceAccount의 이름을 지정 (비어 있으면 기본 이름이 생성됨)

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

resources: {}

nodeSelector: {}

tolerations: []

affinity: {}

ingress:
  enabled: false # Ingress를 사용할지 여부. 현재는 사용하지 않으므로 false로 설정
  className: "" # Ingress 클래스 이름
  annotations: {} # Ingress에 추가할 어노테이션
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    # - host: chart-example.local # 예시 호스트
    #   paths:
    #     - path: /
    #       pathType: ImplementationSpecific
  tls: [] # TLS (HTTPS) 설정
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# 다음 autoscaling 섹션을 values.yaml에 추가하거나, 기존 섹션을 확인하세요.
autoscaling:
  enabled: false # HPA를 사용할지 여부. 현재는 사용하지 않으므로 false로 설정
  minReplicas: 1 # 최소 Pod 개수
  maxReplicas: 10 # 최대 Pod 개수
  targetCPUUtilizationPercentage: 80 # CPU 사용률 기반 스케일링 임계값
  # targetMemoryUtilizationPercentage: 80 # 메모리 사용률 기반 스케일링 임계값 (선택 사항)